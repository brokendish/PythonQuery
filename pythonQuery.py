#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Tue Mar 20 19:22:38 2012

import wx
import wx.grid
import sys  
import os  
import mysql_python_set_user_data as UsrData
import mysql_python_get_tbl_id as UserTbl
import mysql_python_sql_setter as SndSql
import about as abu

# begin wxGlade: extracode
# end wxGlade

histfile="PythonQuery_hist"	#ヒストリファイル

class pythonQuery(wx.Frame):


    def __init__(self, *args, **kwds):
        # begin wxGlade: pythonQuery.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.frame_2_menubar = wx.MenuBar()
        self.MFile = wx.Menu()
        self.MHelp = wx.Menu()
        self.frame_2_menubar.Append(self.MFile, "File")		#
	MenuFileEnd=self.MFile.Append(wx.ID_EXIT,"終了")	#

	self.frame_2_menubar.Append(self.MHelp, "Help")		#
	MenuHelpAbout=self.MHelp.Append(wx.ID_ABOUT,"About")	#

        self.SetMenuBar(self.frame_2_menubar)			#
        # Menu Bar end

        self.label_3 = wx.StaticText(self, -1, u"スキーマ選択")
        self.combo_box_2 = wx.ComboBox(self, -1, choices=[], style=wx.CB_DROPDOWN)
        self.label_6 = wx.StaticText(self, -1, u"ユーザ")
        self.text_ctrl_4 = wx.TextCtrl(self, -1, "")
        self.button_9 = wx.Button(self, -1, u"接続")
        self.label_4 = wx.StaticText(self, -1, u"パスワード")
        self.text_ctrl_3 = wx.TextCtrl(self, -1, "", style=wx.TE_PASSWORD)
        self.grid_1 = wx.grid.Grid(self, -1, size=(1, 1))
        self.text_ctrl_1 = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.HSCROLL)
        self.button_1 = wx.Button(self, -1, u"SQL\n実行")
        self.button_5 = wx.Button(self, -1, u"履歴\n削除")
        self.button_2 = wx.Button(self, -1, u"結果\n削除")
        self.button_6 = wx.Button(self, -1, u"結果\n保存")
        self.button_3 = wx.Button(self, -1, u"SQL\n削除")
        self.button_7 = wx.Button(self, -1, u"予備\nよび")
        self.button_4 = wx.Button(self, -1, u"履歴\n表示")
        self.list_box_1 = wx.ListBox(self, -1, choices=[], style=wx.LB_HSCROLL)
        self.list_box_2 = wx.ListBox(self, -1, choices=[], style=wx.LB_HSCROLL)
        self.list_box_3 = wx.ListBox(self, -1, choices=[], style=wx.LB_HSCROLL)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT, self.txt_combo, self.combo_box_2)
        self.Bind(wx.EVT_TEXT_ENTER, self.ent_combo, self.combo_box_2)
        self.Bind(wx.EVT_COMBOBOX, self.ev_combo, self.combo_box_2)
        self.Bind(wx.EVT_BUTTON, self.connect_click, self.button_9)
        self.Bind(wx.EVT_BUTTON, self.btn1_click, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.btn5_click, self.button_5)
        self.Bind(wx.EVT_BUTTON, self.btn2_click, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.btn6_click, self.button_6)
        self.Bind(wx.EVT_BUTTON, self.btn3_click, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.btn7_click, self.button_7)
        self.Bind(wx.EVT_BUTTON, self.btn4_click, self.button_4)
        self.Bind(wx.EVT_LISTBOX_DCLICK, self.list1_click, self.list_box_1)
        self.Bind(wx.EVT_LISTBOX_DCLICK, self.list2_click, self.list_box_2)
        self.Bind(wx.EVT_LISTBOX_DCLICK, self.list3_click, self.list_box_3)
	#メニューイベントの定義
        self.Bind(wx.EVT_MENU, self.OnClose,MenuFileEnd)	#メニュー：終了の処理
	self.Bind(wx.EVT_MENU, self.AboutDisp,MenuHelpAbout)	#メニュー：情報表示の処理

	#キー＆マウスイベント(テーブル一覧で右クリックアップした時のイベント)
	self.list_box_1.Bind(wx.EVT_RIGHT_UP, self.list1_OnMouseRightUp)
	#キー＆マウスイベント(項目一覧で右クリックアップした時のイベント)
	self.list_box_2.Bind(wx.EVT_RIGHT_UP, self.list2_OnMouseRightUp)

	#グローバル変数
	global histfileNam		#履歴ファイル
	histfileNam="PythonQuery_hist"

	#SQL入力エリアでのキープレスイベントの定義※※text_ctrl_1を指定すると文字入力できなくなる※※
	#self.text_ctrl_1.Bind(wx.EVT_KEY_DOWN, self.Tex1OnkeyPress)
	#仕方がないのでグリットにカーソル当ててF1ならいける（仕方がない）
	self.Bind(wx.EVT_KEY_DOWN, self.Tex1OnkeyPress)


        # end wxGlade
	#デフォルト値設定
	self.text_ctrl_4.SetValue("root")		#ユーザID
	self.text_ctrl_3.SetValue("hoge")		#パスワード
	self.combo_box_2.SetValue("mysql")		#スキーマ

    def __set_properties(self):
        # begin wxGlade: pythonQuery.__set_properties
        self.SetTitle("PythonQuery")
        self.SetSize((1220, 647))
        self.label_3.SetMinSize((85, 15))
        self.combo_box_2.SetMinSize((190, 29))
        self.text_ctrl_4.SetMinSize((140, 29))
        self.button_9.SetMinSize((50, 29))
        self.label_4.SetMinSize((67, 15))
        self.text_ctrl_3.SetMinSize((120, 29))
        self.grid_1.CreateGrid(0, 0)
        self.grid_1.SetMinSize((1200, 280))
        self.text_ctrl_1.SetMinSize((500, 300))
        self.text_ctrl_1.SetToolTipString(u"SQLを入力し、選択した部分を実行します。実行は「F1」、「SQL実行」ボタン")
        self.list_box_1.SetMinSize((200, 300))
	self.list_box_1.SetToolTipString(u"ダブルクリックで項目一覧を表示、右クリックでSQLエリアにテーブルIDを挿入")
        self.list_box_2.SetMinSize((200, 300))
	self.list_box_2.SetToolTipString(u"右クリックでSQLエリアに項目IDを挿入")
        self.list_box_3.SetMinSize((200, 300))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: pythonQuery.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.GridSizer(4, 2, 0, 0)
        grid_sizer_3 = wx.GridSizer(7, 7, 0, 0)
        grid_sizer_3.Add(self.label_3, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.combo_box_2, 0, 0, 0)
        grid_sizer_3.Add(self.label_6, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.text_ctrl_4, 0, 0, 0)
        grid_sizer_3.Add(self.label_4, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.text_ctrl_3, 0, wx.LEFT|wx.FIXED_MINSIZE, 0)
        grid_sizer_3.Add(self.button_9, 0, 0, 0)
        sizer_1.Add(grid_sizer_3, 0, 0, 1)
        sizer_1.Add(self.grid_1, 1, wx.EXPAND, 0)
        sizer_8.Add(self.text_ctrl_1, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.button_1, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.button_5, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.button_2, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.button_6, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.button_3, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.button_7, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.button_4, 0, wx.EXPAND, 0)
        sizer_8.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_8.Add(self.list_box_1, 0, wx.EXPAND, 0)
        sizer_8.Add(self.list_box_2, 0, wx.EXPAND, 0)
        sizer_8.Add(self.list_box_3, 0, wx.EXPAND, 0)
        sizer_1.Add(sizer_8, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade
#-------------------------------------------------------------------------------
#SQL実行ボタン押下時の処理
#-------------------------------------------------------------------------------
    def btn1_click(self, event): # wxGlade: pythonQuery.<event_handler>
        print "SQL実行ボタン押下時の処理"
	self.Execute()
        event.Skip()
#-------------------------------------------------------------------------------
#履歴削除ボタン押下時の処理
#-------------------------------------------------------------------------------
    def btn5_click(self, event): # wxGlade: pythonQuery.<event_handler>
        print "履歴削除ボタン押下時の処理"
	if os.path.isfile(histfileNam):						#ファイルの存在確認
		ret=wx.MessageBox('履歴を削除しちゃうよ！', '履歴削除',wx.YES_NO)	#メッセージボックスYESNO
		if ret == wx.YES:
			os.remove(histfileNam)					#ファイル削除
	else:
		wx.MessageBox('今んとこ履歴は無いよ！', '履歴なし',wx.ICON_ERROR)	#メッセージボックス表示
        event.Skip()
#-------------------------------------------------------------------------------
#結果削除ボタン押下時の処理
#-------------------------------------------------------------------------------
    def btn2_click(self, event): # wxGlade: pythonQuery.<event_handler>
        print "結果削除ボタン押下時の処理"
	self.grid_1.DeleteCols(0,99999)	#列削除　＜最終の取得方法解らない　その場しのぎ
	self.grid_1.DeleteRows(0,99999)	#行削除　＜最終の取得方法解らない　その場しのぎ
        event.Skip()
#-------------------------------------------------------------------------------
#結果保存ボタン押下時の処理
#-------------------------------------------------------------------------------
    def btn6_click(self, event): # wxGlade: pythonQuery.<event_handler>
        print "結果保存ボタン押下時の処理"
	#Dir=wx.DirDialog(self, message='保存先のディレクトリを選択',defaultPath ="./")#ファイル保存ダイアログを表示
	#ファイル保存ダイアログを表示
	Fil=wx.FileDialog(self, message='保存先を選択',defaultDir ="./",style=wx.FD_SAVE)
        AnsBtn = Fil.ShowModal()
	dirNam=Fil.GetDirectory()		#ディレクトリ名を取得
	fileNam=Fil.GetFilename()		#ファイル名を取得
	print dirNam + "/" + fileNam
	if fileNam != "":			#ファイル存在確認
		f = open(fileNam,"w")		#ファイルオープン＆書込	
		f.write("ああああ、まだ結果保存出来ません")	#１行目の０文字目から最後まで
		f.close()			#ファイルクローズ

        event.Skip()
#-------------------------------------------------------------------------------
#SQL削除ボタン押下時の処理
#-------------------------------------------------------------------------------
    def btn3_click(self, event): # wxGlade: pythonQuery.<event_handler>
        print "SQL削除ボタン押下時の処理"
	self.text_ctrl_1.Clear()		#テキストエリアをクリア
        event.Skip()
#-------------------------------------------------------------------------------
#履歴表示ボタン押下時の処理
#-------------------------------------------------------------------------------
    def btn4_click(self, event): # wxGlade: pythonQuery.<event_handler>
        print "履歴表示ボタン押下時の処理"
	ret=wx.MessageBox('履歴を読込みます', '履歴読込',wx.YES_NO)#メッセージボックスYESNO
	if ret == wx.YES:
		if os.path.isfile(histfileNam):	#ファイルの存在確認
			self.text_ctrl_1.AppendText("\n" + "#-------履歴読込--------" + "\n")
			for line in open(histfileNam,"r"):
				self.text_ctrl_1.AppendText(line)#SQL入力エリアの最後に追記する
		else:
			wx.MessageBox('履歴ファイルが無いみたい', '履歴読込',wx.ICON_ERROR)
        event.Skip()
#-------------------------------------------------------------------------------
#テーブル一覧クリック時の処理
#-------------------------------------------------------------------------------
    def list1_click(self, event): # wxGlade: pythonQuery.<event_handler>
        print "テーブル一覧クリック時の処理"
	usrData = UsrData.UserData(self.text_ctrl_4.GetValue(),
				   self.text_ctrl_3.GetValue(),
				   self.combo_box_2.GetValue())
	#項目一覧取得
	retK=UserTbl.GetTableId(usrData).getColumns(self.list_box_1.GetStringSelection())
	self.list_box_2.Clear()					#リストボックスをクリア
	for tblLine in retK:
		self.list_box_2.InsertItems(tblLine,0)		#項目一覧を取得
	#キー情報取得
	retK=UserTbl.GetTableId(usrData).getKeyColumns(self.list_box_1.GetStringSelection())
	self.list_box_3.Clear()					#リストボックスをクリア
	for tblLine in retK:
		self.list_box_3.InsertItems(tblLine,0)		#項目一覧を取得
        event.Skip()
#-------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------
    def list2_click(self, event): # wxGlade: pythonQuery.<event_handler>
        print "Event handler `list2_click' not implemented!"
        event.Skip()

#-------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------
    def list3_click(self, event): # wxGlade: pythonQuery.<event_handler>
        print "Event handler `list3_click' not implemented!"
        event.Skip()

#-------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------
    def txt_combo(self, event): # wxGlade: pythonQuery.<event_handler>
        print "Event handler `txt_combo' not implemented"
        event.Skip()

#-------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------
    def ent_combo(self, event): # wxGlade: pythonQuery.<event_handler>
        print "Event handler `ent_combo' not implemented"
        event.Skip()

#-------------------------------------------------------------------------------
#コンボボックス変更時のイベント
#-------------------------------------------------------------------------------
    def ev_combo(self, event): # wxGlade: pythonQuery.<event_handler>
        print "Event handler `ev_combo' not implemented"
	self.setuzokuu()	#接続ボタン押下と同じ処理を行う
        event.Skip()
#-------------------------------------------------------------------------------
#接続ボタン押下時の処理
#-------------------------------------------------------------------------------
    def connect_click(self, event): # wxGlade: pythonQuery.<event_handler>
        print "接続ボタン押下時の処理"
	self.setuzokuu()	#コンボボックス変更時と同じ処理を行う
        event.Skip()
#-------------------------------------------------------------------------------
#テーブルIDでマウスの右クリックUPされた時の処理
#-------------------------------------------------------------------------------
    def list1_OnMouseRightUp(self,event):
	print "テーブルIDでマウスの右クリックUPされた時の処理"
	tblid=self.list_box_1.GetStringSelection()	#選択されているテーブルIDを取得
	#SQL入力エリアのカーソル位置に挿入
	self.text_ctrl_1.SetInsertionPoint(self.text_ctrl_1.GetInsertionPoint())
	self.text_ctrl_1.WriteText(tblid + "\n")	#SQL入力エリアにテーブルIDを追記する
	event.Skip()
#-------------------------------------------------------------------------------
#項目IDでマウスの右クリックUPされた時の処理
#-------------------------------------------------------------------------------
    def list2_OnMouseRightUp(self,event):
	print "項目IDでマウスの右クリックUPされた時の処理"
	kmkid=self.list_box_2.GetStringSelection()	#選択されている項目IDを取得
	#SQL入力エリアのカーソル位置に挿入
	self.text_ctrl_1.SetInsertionPoint(self.text_ctrl_1.GetInsertionPoint())
	self.text_ctrl_1.WriteText(kmkid + "\n")	#SQL入力エリアに項目IDを追記する
	event.Skip()
#-------------------------------------------------------------------------------
#予備ボタン
#-------------------------------------------------------------------------------
    def btn7_click(self, event): # wxGlade: pythonQuery.<event_handler>
        print "Event handler `btn7_click' not implemented!"
	#カスタムダイアログを表示しておく
	show=abu.About(self)
	ret=show.ShowModal()
        event.Skip()

# end of class pythonQuery

#-------------------------------------------------------------------------------
#履歴更新の処理
#-------------------------------------------------------------------------------
    def hist(self,ret_str):
	f = open(histfileNam,"a")	#ファイルオープン＆書込
	f.write(ret_str + "\n")		#選択範囲の文字を渡す
	f.close()
#-------------------------------------------------------------------------------
#接続ボタン、コンボボックス変更時の処理
#-------------------------------------------------------------------------------
    def setuzokuu(self):
	usrData = UsrData.UserData(self.text_ctrl_4.GetValue(),
				   self.text_ctrl_3.GetValue(),
				   self.combo_box_2.GetValue())	

	self.list_box_1.Clear()					#リストボックスをクリア
	for tblLine in UserTbl.GetTableId(usrData).getTblId():	#テーブル一覧を取得
		self.list_box_1.InsertItems(tblLine,0)		#テーブル一覧を設定

	self.combo_box_2.Clear()				#スキーマ選択クリア
	for tblLine in UserTbl.GetTableId(usrData).getSchema():	#スキーマ一覧取得
		self.combo_box_2.AppendItems(tblLine)		#スキーマ選択combo_boxにスキーマ一覧を設定
	self.list_box_2.Clear()					#リストボックスをクリア
#-------------------------------------------------------------------------------
#カスタムダイアログ(About)の表示
#-------------------------------------------------------------------------------
    def AboutDisp(self,event):
	show=abu.About(self)
	ret=show.ShowModal()
#-------------------------------------------------------------------------------
#キープレスの処理：ｔｅｘｔ１エリア
#-------------------------------------------------------------------------------
    def Tex1OnkeyPress(self,event):
	keycode = event.GetKeyCode()	#イベントからキーコードを取得
	if keycode == wx.WXK_F1:	#F1キーの場合
		self.Execute()		#
	else:
		pass			#何もしない
#-------------------------------------------------------------------------------
#選択範囲のSQLを実行し、結果を返す
#-------------------------------------------------------------------------------
    def Execute(self):
	usrData = UsrData.UserData(self.text_ctrl_4.GetValue(),
				   self.text_ctrl_3.GetValue(),
				   self.combo_box_2.GetValue())
	ret_str=SndSql.SqlSetter(usrData).setSql2(self.text_ctrl_1.GetStringSelection())#SQLの結果取得
	t=0
	y=0
	self.grid_1.DeleteCols(0,99999)	#列削除　＜最終の取得方法解らない　その場しのぎ
	self.grid_1.DeleteRows(0,99999)	#行削除　＜最終の取得方法解らない　その場しのぎ
	self.grid_1.AppendCols(len(ret_str[0]))		#列追加
	for ret1 in ret_str:
		self.grid_1.AppendRows(1)		#1行追加
		y=0
		for ret2 in ret1:
			if not isinstance(ret2,str):
					ret2=str(ret2)	#文字型に変換
			self.grid_1.SetCellValue(t,y,ret2.encode('utf-8'))
			y=y+1
		t=t+1
	print ret_str
	self.hist(self.text_ctrl_1.GetStringSelection())#履歴更新の処理(選択範囲の文字を渡す)
#-------------------------------------------------------------------------------
#閉じるボタンの処理
#-------------------------------------------------------------------------------
    def OnClose(self,event):
	        self.Close(True)

#-------------------------------------------------------------------------------
if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    pythonQuery = pythonQuery(None, -1, "")
    app.SetTopWindow(pythonQuery)
    pythonQuery.Show()
    app.MainLoop()
